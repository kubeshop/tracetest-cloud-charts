keto:
  image:
    tag: "v0.11.1"

  extraVolumes:
    - name: keto-namespace-config
      configMap:
        name: keto-namespace-config

  extraVolumeMounts:
    - name: keto-namespace-config
      mountPath: /home/ory/namespaces.keto.ts

  keto:
    automigration:
      enabled: true
      type: initContainer

    config:
      dsn: postgres://user:pass@dbhost:5432/dbname
      namespaces:
        location: file:///home/ory/namespaces.keto.ts
      log:
        level: debug

kratos:
  image:
    tag: "v1.0.0"

  # secret:
  #   enabled: false
  # serviceAccount:
  #   create: false
  # job:
  #   serviceAccount:
  #     create: false

  deployment:
    extraVolumes:
      - name: kratos-custom-config
        configMap:
          name: kratos-custom-config

    extraVolumeMounts:
      - name: kratos-custom-config
        mountPath: /etc/config/kratos

  kratos:
    automigration:
      enabled: true
      type: initContainer

    config:
      dsn: postgres://user:password@dbaddress:5432/kratos

      log:
        level: debug

      cookies:
        path: /
        same_site: Lax
        domain: tracetest.io

      serve:
        public:
          base_url: https://api.example.com/auth
          cors:
            enabled: true
            allowed_origins: []
            allowed_methods:
              - POST
              - GET
              - PUT
              - PATCH
              - DELETE
            allowed_headers:
              - Authorization
              - Cookie
              - Content-Type
            exposed_headers:
              - Content-Type
              - Set-Cookie
        admin:
          base_url: http://kratos:4434/

      selfservice:
        default_browser_return_url: https://web.example.com/
        allowed_return_urls: []

        methods:
          password:
            enabled: false
          totp:
            config:
              issuer: Kratos
            enabled: false
          lookup_secret:
            enabled: false
          link:
            enabled: false
          code:
            enabled: false

        flows:
          error:
            ui_url: https://web.example.com/error

          logout:
            after:
              default_browser_return_url: https://web.example.com

          login:
            ui_url: https://web.example.com
            lifespan: 10m
            after:
              oidc:
                hooks:
                  ## oidc after login web hook ##
                  #
                  # This hook is called after a user has successfully registered.
                  # It is important to set can_interrupt: false and response.parse = false,
                  # so the identity ID could be available in the webhook.
                  # See related issue: https://github.com/ory/kratos/issues/3340
                  #
                  - hook: web_hook
                    config:
                      url: https://api.example.com/api/webhook/login
                      method: POST
                      body: file:///etc/config/kratos/login.jsonnet
                      can_interrupt: false
                      response:
                        ignore: false
                        parse: false

          registration:
            after:
              oidc:
                hooks:
                  ## oidc after registration web hook ##
                  #
                  # This hook is called after a user has successfully registered.
                  # It is important to set can_interrupt: false and response.parse = false,
                  # so the identity ID could be available in the webhook.
                  # See related issue: https://github.com/ory/kratos/issues/3340
                  #
                  - hook: web_hook
                    config:
                      url: https://api.example.com/api/webhook/login
                      method: POST
                      body: file:///etc/config/kratos/login.jsonnet
                      can_interrupt: false
                      response:
                        ignore: false
                        parse: false
                  ## oidc after registration session hook ##
                  # This hook prevents having to log in after sign-up to get a session
                  - hook: session

      secrets:
        cookie:
          - PLEASE-CHANGE-ME-I-AM-VERY-INSECURE
        cipher:
          - 32-LONG-SECRET-NOT-SECURE-AT-ALL

      ciphers:
        algorithm: xchacha20-poly1305

      hashers:
        algorithm: bcrypt
        bcrypt:
          cost: 8

      identity:
        default_schema_id: default
        schemas:
          - id: default
            url: file:///etc/config/kratos/identity.schema.json

      courier:
        smtp:
          connection_uri: smtps://test:test@mailslurper:1025/?skip_ssl_verify=true

oathkeeper:
  extraVolumes:
    - name: oathkeeper-jwks
      secret:
        name: oathkeeper-custom-config

  extraVolumeMounts:
    - name: id_token.jwks.json
      mountPath: /home/ory/id_token.jwks.json
  service:
    proxy:
      annotations:
        cloud.google.com/backend-config: '{"default":"oathkeeper-proxy-backendconfig"}'

  ingress:
    proxy:
      # ingress rules are handled all toghether in the ingress.yaml file
      enabled: false

  oathkeeper:
    mutatorIdTokenJWKs: '$ID_TOKEN_JSON'
    config:
      log:
        level: debug
        format: json

      serve:
        proxy:
          cors:
            # we need to disable CORS in the proxy so it doesn't interfer with the upstream headers
            enabled: false

      errors:
        fallback:
          - json

        handlers:
          redirect:
            enabled: true
            config:
              to: https://api.example.com/oathkeeper/login
              when:
                - error:
                    - unauthorized
                    - forbidden
                  request:
                    header:
                      accept:
                        - text/html
          json:
            enabled: true
            config:
              verbose: true

      access_rules:
        matching_strategy: glob

      authenticators:
        anonymous:
          enabled: true
          config:
            subject: guest

        cookie_session:
          enabled: true
          config:
            check_session_url: http://kratos-public.ory/sessions/whoami
            preserve_path: true
            extra_from: "@this"
            subject_from: "identity.id"
            only:
              - ory_kratos_session

        noop:
          enabled: true

      authorizers:
        allow:
          enabled: true

      mutators:
        noop:
          enabled: true

        id_token:
          enabled: true
          config:
            issuer_url: https://api.example.com/oathkeeper
            claims: |
              {
                "session": {{ .Extra | toJson }}
              }
    accessRules: |-
      - id: "ory:kratos:public"
        upstream:
          preserve_host: true
          url: "http://kratos-public.ory"
          strip_path: /auth
        match:
          url: "https://$API_URL/auth/<**>"
          methods:
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
        authenticators:
          - handler: noop
        authorizer:
          handler: allow
        mutators:
          - handler: noop
