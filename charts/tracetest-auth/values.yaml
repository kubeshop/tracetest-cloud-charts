global:
  tracetestCloud:
    service:
      httpPort: 8090

  sso:
    google:
      clientID: ""
      clientSecret: ""
    github:
      clientID: ""
      clientSecret: ""
  smtp:
    uri: "smtps://test:test@mailslurper:1025/?skip_ssl_verify=true"

  postgresql:
    auth:
      host: "postgres"
      username: "postgres"
      password: "postgres"
      dbname: "tracetest"
      port: "5432"

  urls:
    cookieDomain: "tracetest.localdev"
    web:
      protocol: "https"
      hostname: "tracetest.localdev"
      port: "30000"
      path: "/"
    
    api:
      protocol: "https"
      hostname: "tracetest.localdev"
      port: "30000"
      path: "/api"

    auth:
      protocol: "https"
      hostname: "tracetest.localdev"
      port: "30000"
      path: "/auth"

# Uncomment this code if you want to override the DSN for Kratos and Keto
# config:
#   kratos:
#     postgresDsnOverride: something
#   keto:
#     postgresDsnOverride: something

keto:
  image:
    tag: "v0.11.1"

  extraVolumes:
    - name: keto-namespace-config
      configMap:
        name: keto-namespace-config

  extraVolumeMounts:
    - name: keto-namespace-config
      mountPath: /home/ory/namespaces.keto.ts

  deployment:
      extraEnv:
        - name: DSN
          valueFrom:
            secretKeyRef:
              name: keto-secrets
              key: DSN

  keto:
    automigration:
      enabled: true
      type: initContainer

    config:
      namespaces:
        location: file:///home/ory/namespaces.keto.ts
      log:
        level: debug

kratos:
  image:
    tag: "v1.2.0"

  deployment:
    extraVolumes:
      - name: kratos-custom-config
        configMap:
          name: kratos-custom-config

    extraVolumeMounts:
      - name: kratos-custom-config
        mountPath: /etc/config/kratos
    
    extraEnv:
      - name: COOKIES_DOMAIN
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: COOKIES_DOMAIN

      - name: SERVE_PUBLIC_BASE_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: BASE_AUTH_URL

      - name: SERVE_PUBLIC_CORS_ALLOWED_ORIGINS
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: CORS_ALLOWED_ORIGINS

      - name: SELFSERVICE_DEFAULT_BROWSER_RETURN_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: DEFAULT_BROWSER_RETURN_URL
      
      - name: SELFSERVICE_ALLOWED_RETURN_URLS_0
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: DEFAULT_BROWSER_RETURN_URL

      - name: SELFSERVICE_FLOWS_ERROR_UI_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: ERROR_UI_URL

      - name: SELFSERVICE_FLOWS__LOGOUT_AFTER_DEFAULT_BROWSER_RETURN_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: DEFAULT_BROWSER_RETURN_URL

      - name: SELFSERVICE_FLOWS_LOGIN_UI_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: DEFAULT_BROWSER_RETURN_URL

      - name: SELFSERVICE_FLOWS_LOGIN_AFTER_OIDC_HOOKS_0_CONFIG_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: LOGIN_AFTER_HOOK_URL

      - name: SELFSERVICE_FLOWS_REGISTRATION_AFTER_OIDC_HOOKS_0_CONFIG_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: LOGIN_AFTER_HOOK_URL

      - name: SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: kratos-secrets
            key: GITHUB_CLIENT_ID
      - name: SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_0_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: kratos-secrets
            key: GITHUB_CLIENT_SECRET

      - name: SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_1_CLIENT_ID
        valueFrom:
          secretKeyRef:
            name: kratos-secrets
            key: GOOGLE_CLIENT_ID
      - name: SELFSERVICE_METHODS_OIDC_CONFIG_PROVIDERS_1_CLIENT_SECRET
        valueFrom:
          secretKeyRef:
            name: kratos-secrets
            key: GOOGLE_CLIENT_SECRET
          
  secret:
    nameOverride: "kratos-secrets"
    enabled: false

  kratos:
    automigration:
      enabled: true
      type: initContainer

    config:
      version: v0.13.0
      serve:
        public:
          # base_url: http://localhost:4433/
          cors:
            enabled: true
            allowed_origins: []
            allowed_methods:
              - POST
              - GET
              - PUT
              - PATCH
              - DELETE
            allowed_headers:
              - Authorization
              - Cookie
              - Content-Type
            exposed_headers:
              - Content-Type
              - Set-Cookie
        admin:
          base_url: http://kratos:4434/

      selfservice:
        # default_browser_return_url: http://localhost:3000
        # allowed_return_urls:
        #   - http://localhost:3000

        methods:
          password:
            enabled: false
          totp:
            config:
              issuer: Kratos
            enabled: false
          lookup_secret:
            enabled: false
          link:
            enabled: false
          code:
            enabled: false
          oidc:
            config:
              providers:
                - id: github
                  provider: github
                  mapper_url: file:///etc/config/kratos/github.jsonnet
                  scope:
                    - user:email
                - id: google
                  provider: google
                  mapper_url: file:///etc/config/kratos/google.jsonnet
                  scope:
                    - email
                    - profile
                  requested_claims:
                    id_token:
                      email:
                        essential: true
                      email_verified:
                        essential: true
                      given_name:
                        essential: true
                      family_name: null
                      hd: null
            enabled: true

        flows:
        #   error:
        #     ui_url: http://localhost:3000/error

          # logout:
          #   after:
          #     default_browser_return_url: http://localhost:3000

          login:
            # ui_url: http://localhost:3000
            lifespan: 10m
            after:
              oidc:
                hooks:
                  ## oidc after login web hook ##
                  #
                  # This hook is called after a user has successfully registered.
                  # It is important to set can_interrupt: false and response.parse = false,
                  # so the identity ID could be available in the webhook.
                  # See related issue: https://github.com/ory/kratos/issues/3340
                  #
                  - hook: web_hook
                    config:
                      # url: http://host.docker.internal:8090/webhook/login
                      method: POST
                      body: file:///etc/config/kratos/login.jsonnet
                      can_interrupt: false
                      response:
                        ignore: false
                        parse: false

          registration:
            after:
              oidc:
                hooks:
                  ## oidc after registration web hook ##
                  #
                  # This hook is called after a user has successfully registered.
                  # It is important to set can_interrupt: false and response.parse = false,
                  # so the identity ID could be available in the webhook.
                  # See related issue: https://github.com/ory/kratos/issues/3340
                  #
                  - hook: web_hook
                    config:
                      # url: http://host.docker.internal:8090/webhook/login
                      method: POST
                      body: file:///etc/config/kratos/login.jsonnet
                      can_interrupt: false
                      response:
                        ignore: false
                        parse: false
                  ## oidc after registration session hook ##
                  #
                  # This hook prevents having to log in after sign-up to get a session
                  #
                  - hook: session

      log:
        level: debug
        format: text
        leak_sensitive_values: false

      # secrets:
      #   cookie:
      #     - PLEASE-CHANGE-ME-I-AM-VERY-INSECURE
      #   cipher:
      #     - 32-LONG-SECRET-NOT-SECURE-AT-ALL

      ciphers:
        algorithm: xchacha20-poly1305

      hashers:
        algorithm: bcrypt
        bcrypt:
          cost: 8

      identity:
        default_schema_id: default
        schemas:
          - id: default
            url: file:///etc/config/kratos/identity.schema.json

      courier:
        smtp:
          connection_uri: smtps://test:test@mailslurper:1025/?skip_ssl_verify=true


oathkeeper:
  secret:
    nameOverride: "oathkeeper-secrets"
    enabled: false
    
  deployment:
    extraVolumes:
      - name: oathkeeper-accessrules
        configMap:
          name: tracetest-oathkeeper-rules

    extraVolumeMounts:
      - name: oathkeeper-accessrules
        mountPath: /etc/config/oathkeeper/

    extraEnv:
      - name: SERVE_PROXY_CORS_ALLOWED_ORIGINS
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: CORS_ALLOWED_ORIGINS

      - name: ERRORS_HANDLERS_REDIRECT_CONFIG_TO
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: LOGIN_URL

      - name: MUTATORS_ID_TOKEN_CONFIG_ISSUER_URL
        valueFrom:
          configMapKeyRef:
            name: tracetest-auth-config
            key: ISSUER_URL

  ingress:
    proxy:
      # ingress rules are handled all toghether in the ingress.yaml file
      enabled: false

  oathkeeper:
    
    config:
      log:
        level: debug
        format: json

      errors:
        fallback:
          - json

        handlers:
          redirect:
            enabled: true
            config:
              # to: http://localhost:4455/login
              when:
                - error:
                    - unauthorized
                    - forbidden
                  request:
                    header:
                      accept:
                        - text/html
          json:
            enabled: true
            config:
              verbose: true

      access_rules:
        matching_strategy: glob
        repositories:
          - file:///etc/config/oathkeeper/access-rules.yml
        
      authenticators:
        anonymous:
          enabled: true
          config:
            subject: guest

        cookie_session:
          enabled: true
          config:
            check_session_url: http://kratos:4433/sessions/whoami
            preserve_path: true
            extra_from: "@this"
            subject_from: "identity.id"
            only:
              - ory_kratos_session

        noop:
          enabled: true

      authorizers:
        allow:
          enabled: true

      mutators:
        noop:
          enabled: true

        id_token:
          enabled: true
          config:
            # issuer_url: http://localhost:4455/
            jwks_url: file:///etc/config/oathkeeper/id_token.jwks.json
            claims: |
              {
                "session": {{ .Extra | toJson }}
              }
